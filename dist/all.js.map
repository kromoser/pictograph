{"version":3,"sources":["csv.js"],"names":["readFile","file","callbackFn","reader","FileReader","onload","readAsText","document","getElementById","addEventListener","uploadedFile","files","e","graphContainer","querySelector","data","d3","csvParse","target","result","columnOne","columns","columnTwo","reducer","accumulator","currentValue","parseInt","totalCount","reduce","forEach","element","node","createElement","labelNode","totalsNode","symbolTotal","Math","round","label","createTextNode","totals","classList","add","appendChild","console","log","i","drawPersonSVG","select","append","attr","style"],"mappings":"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","file":"all.js","sourcesContent":["\nimport * as d3 from \"d3\";\n\nfunction readFile(file, callbackFn) {\n  const reader = new FileReader();\n  reader.onload = callbackFn\n  reader.readAsText(file)\n}\n\n\n\ndocument.getElementById('file-select').addEventListener('change', function() {\n  const uploadedFile = this.files[0]\n  readFile(uploadedFile, function(e) {\n    const graphContainer = document.querySelector('#vis-container');\n\n    // Take CSV, split into row objects, and push them into array\n    var data = d3.csvParse(e.target.result)\n\n    const columnOne = data.columns[0];\n    const columnTwo = data.columns[1];\n\n    // Get total counts from column two for use in percentages\n    const reducer = (accumulator, currentValue) => accumulator + parseInt(currentValue[columnTwo])\n    const totalCount = data.reduce(reducer,0);\n\n    data.forEach(function(element) {\n      const node = document.createElement('LI');\n      const labelNode = document.createElement('span');\n      const totalsNode = document.createElement('span');\n      // Get each value to be normalized to a distribution between 1 and 20\n      const symbolTotal = Math.round(element[columnTwo]/totalCount * 20) + 1 //This ensures a minimum of 1 symbol per row\n      const label = document.createTextNode(element[columnOne] + ': ');\n      const totals = document.createTextNode('(Totals:' + element[columnTwo] + '/' + totalCount + ')')\n\n      node.classList.add('row')\n      labelNode.classList.add('row--label');\n      totalsNode.classList.add('row--totals');\n\n      labelNode.appendChild(label);\n      node.appendChild(labelNode);\n\n      console.log(symbolTotal)\n\n      for ( let i = 0; i < symbolTotal; i++ ) {\n        drawPersonSVG(node)\n        //const symbol = document.createTextNode('<3')\n        //node.appendChild(symbol)\n      };\n\n      totalsNode.appendChild(totals)\n      node.appendChild(totalsNode)\n      graphContainer.appendChild(node)\n    });\n\n    console.log(data.reduce(reducer,0));\n  })\n})\n\n\nfunction drawPersonSVG(target) {\n    d3.select(target)\n      .append('svg')\n      .attr('width', 24)\n      .attr('height', 24)\n      .append('path')\n      .attr('d', 'M5,1C5,3.7 6.56,6.16 9,7.32V22H11V15H13V22H15V7.31C17.44,6.16 19,3.7 19,1H17A5,5 0 0,1 12,6A5,5 0 0,1 7,1M12,1C10.89,1 10,1.89 10,3C10,4.11 10.89,5 12,5C13.11,5 14,4.11 14,3C14,1.89 13.11,1 12,1Z')\n      .style('fill', 'purple')\n}\n"]}