{"version":3,"sources":["csv.js"],"names":["upload_button","el","callback","uploader","document","getElementById","reader","FileReader","onload","e","contents","target","result","addEventListener","handleFiles","file","files","readAsText","createList","csvFile","graphContainer","querySelector","data","d3","csvParse","console","log","columnOne","columns","columnTwo","reducer","accumulator","currentValue","parseInt","totalCount","reduce","forEach","element","node","createElement","symbolTotal","Math","round","label","createTextNode","totals","appendChild","i","drawPersonSVG","select","append","attr","style"],"mappings":"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","file":"all.js","sourcesContent":["\n// handle upload button\nfunction upload_button(el, callback) {\n  var uploader = document.getElementById(el);\n  var reader = new FileReader();\n\n  reader.onload = function(e) {\n    var contents = e.target.result;\n    callback(contents);\n  };\n\n  uploader.addEventListener(\"change\", handleFiles, false);\n\n  function handleFiles() {\n    var file = this.files[0];\n    reader.readAsText(file);\n  };\n};\n\n\nfunction createList(csvFile) {\n\n  const graphContainer = document.querySelector('#vis-container');\n  //const csvFile = document.getElementById('file-select').files[0];\n\n\n  // Take CSV, split into row objects, and push them into array\n    var data = d3.csvParse(csvFile) \n\n    console.log(data);\n\n    const columnOne = data.columns[0];\n    const columnTwo = data.columns[1];\n\n\n    // Get total counts from column two for use in percentages\n    const reducer = (accumulator, currentValue) => accumulator + parseInt(currentValue[columnTwo])\n    const totalCount = data.reduce(reducer,0);\n\n    data.forEach(function(element) {\n      const node = document.createElement('LI');\n      // Get each value to be normalized to a distribution between 1 and 20\n      const symbolTotal = Math.round(element[columnTwo]/totalCount * 20)\n      const label = document.createTextNode(element[columnOne] + ': ');\n      const totals = document.createTextNode('Totals:' + element[columnTwo] + '/' + totalCount + ')')\n\n      node.appendChild(label);\n\n      console.log(symbolTotal)\n\n      for ( let i = 0; i < symbolTotal; i++ ) {\n        drawPersonSVG(node)\n        //const symbol = document.createTextNode('<3')\n        //node.appendChild(symbol)\n      };\n\n      node.appendChild(totals)\n      graphContainer.appendChild(node)\n    });\n\n    console.log(data.reduce(reducer,0));\n\n}\n\nfunction drawPersonSVG(target) {\n    d3.select(target)\n      .append('svg')\n      .attr('width', 24)\n      .attr('height', 24)\n      .append('path')\n      .attr('d', 'M5,1C5,3.7 6.56,6.16 9,7.32V22H11V15H13V22H15V7.31C17.44,6.16 19,3.7 19,1H17A5,5 0 0,1 12,6A5,5 0 0,1 7,1M12,1C10.89,1 10,1.89 10,3C10,4.11 10.89,5 12,5C13.11,5 14,4.11 14,3C14,1.89 13.11,1 12,1Z')\n      .style('fill', 'purple')\n}\n"]}