{"version":3,"sources":["csv.js"],"names":["createList","graphContainer","document","querySelector","d3","csv","then","data","console","log","columnOne","columns","columnTwo","reducer","accumulator","currentValue","parseInt","totalCount","reduce","forEach","element","node","createElement","symbolTotal","Math","round","label","createTextNode","totals","appendChild","i","drawPersonSVG","target","select","append","attr","style"],"mappings":";;AAIA,SAASA,UAAT,GAAsB;AAEpB,MAAMC,cAAc,GAAGC,QAAQ,CAACC,aAAT,CAAuB,gBAAvB,CAAvB,CAFoB,CAIpB;;AACAC,EAAAA,EAAE,CAACC,GAAH,CAAO,mBAAP,EAA4BC,IAA5B,CAAiC,UAASC,IAAT,EAAe;AAE9CC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAEA,QAAMG,SAAS,GAAGH,IAAI,CAACI,OAAL,CAAa,CAAb,CAAlB;AACA,QAAMC,SAAS,GAAGL,IAAI,CAACI,OAAL,CAAa,CAAb,CAAlB,CAL8C,CAQ9C;;AACA,QAAME,OAAO,GAAG,SAAVA,OAAU,CAACC,WAAD,EAAcC,YAAd;AAAA,aAA+BD,WAAW,GAAGE,QAAQ,CAACD,YAAY,CAACH,SAAD,CAAb,CAArD;AAAA,KAAhB;;AACA,QAAMK,UAAU,GAAGV,IAAI,CAACW,MAAL,CAAYL,OAAZ,EAAoB,CAApB,CAAnB;AAEAN,IAAAA,IAAI,CAACY,OAAL,CAAa,UAASC,OAAT,EAAkB;AAC7B,UAAMC,IAAI,GAAGnB,QAAQ,CAACoB,aAAT,CAAuB,IAAvB,CAAb,CAD6B,CAE7B;;AACA,UAAMC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWL,OAAO,CAACR,SAAD,CAAP,GAAmBK,UAAnB,GAAgC,EAA3C,CAApB;AACA,UAAMS,KAAK,GAAGxB,QAAQ,CAACyB,cAAT,CAAwBP,OAAO,CAACV,SAAD,CAAP,GAAqB,IAA7C,CAAd;AACA,UAAMkB,MAAM,GAAG1B,QAAQ,CAACyB,cAAT,CAAwB,YAAYP,OAAO,CAACR,SAAD,CAAnB,GAAiC,GAAjC,GAAuCK,UAAvC,GAAoD,GAA5E,CAAf;AAEAI,MAAAA,IAAI,CAACQ,WAAL,CAAiBH,KAAjB;AAEAlB,MAAAA,OAAO,CAACC,GAAR,CAAYc,WAAZ;;AAEA,WAAM,IAAIO,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGP,WAArB,EAAkCO,CAAC,EAAnC,EAAwC;AACtCC,QAAAA,aAAa,CAACV,IAAD,CAAb,CADsC,CAEtC;AACA;AACD;;AAAA;AAEDA,MAAAA,IAAI,CAACQ,WAAL,CAAiBD,MAAjB;AACA3B,MAAAA,cAAc,CAAC4B,WAAf,CAA2BR,IAA3B;AACD,KAnBD;AAqBAb,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACW,MAAL,CAAYL,OAAZ,EAAoB,CAApB,CAAZ;AACD,GAlCD;AAmCD;;AAED,SAASkB,aAAT,CAAuBC,MAAvB,EAA+B;AAC3B5B,EAAAA,EAAE,CAAC6B,MAAH,CAAUD,MAAV,EACGE,MADH,CACU,KADV,EAEGC,IAFH,CAEQ,OAFR,EAEiB,EAFjB,EAGGA,IAHH,CAGQ,QAHR,EAGkB,EAHlB,EAIGD,MAJH,CAIU,MAJV,EAKGC,IALH,CAKQ,GALR,EAKa,qMALb,EAMGC,KANH,CAMS,MANT,EAMiB,QANjB;AAOH","file":"all.js","sourcesContent":["\n\n\n\nfunction createList() {\n\n  const graphContainer = document.querySelector('#vis-container');\n\n  // Take CSV, split into row objects, and push them into array\n  d3.csv('/app/csv/test.csv').then(function(data) {\n\n    console.log(data);\n\n    const columnOne = data.columns[0];\n    const columnTwo = data.columns[1];\n\n\n    // Get total counts from column two for use in percentages\n    const reducer = (accumulator, currentValue) => accumulator + parseInt(currentValue[columnTwo])\n    const totalCount = data.reduce(reducer,0);\n\n    data.forEach(function(element) {\n      const node = document.createElement('LI');\n      // Get each value to be normalized to a distribution between 1 and 10\n      const symbolTotal = Math.round(element[columnTwo]/totalCount * 10)\n      const label = document.createTextNode(element[columnOne] + ': ');\n      const totals = document.createTextNode('Totals:' + element[columnTwo] + '/' + totalCount + ')')\n\n      node.appendChild(label);\n\n      console.log(symbolTotal)\n\n      for ( let i = 0; i < symbolTotal; i++ ) {\n        drawPersonSVG(node)\n        //const symbol = document.createTextNode('<3')\n        //node.appendChild(symbol)\n      };\n\n      node.appendChild(totals)\n      graphContainer.appendChild(node)\n    });\n\n    console.log(data.reduce(reducer,0));\n  });\n}\n\nfunction drawPersonSVG(target) {\n    d3.select(target)\n      .append('svg')\n      .attr('width', 24)\n      .attr('height', 24)\n      .append('path')\n      .attr('d', 'M5,1C5,3.7 6.56,6.16 9,7.32V22H11V15H13V22H15V7.31C17.44,6.16 19,3.7 19,1H17A5,5 0 0,1 12,6A5,5 0 0,1 7,1M12,1C10.89,1 10,1.89 10,3C10,4.11 10.89,5 12,5C13.11,5 14,4.11 14,3C14,1.89 13.11,1 12,1Z')\n      .style('fill', 'purple')\n}\n"]}